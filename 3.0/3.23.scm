(define (make-deque)
  (list '() '()))
(define (front-ptr deque)
  (car deque))
(define (rear-ptr deque)
  (cdr deque))
(define (set-front-ptr! deque item)
  (set-car! deque item))
(define (set-rear-ptr! deque item)
  (set-cdr! deque item))
(define (empty-deque? deque)
  (if (null? (front-ptr deque)) #t #f))
(define (front-deque deque)
  (get-value (car (front-ptr deque))))
(define (rear-deque deque)
  (get-value (car (rear-ptr deque))))
(define (front-insert-deque! deque item)
  (let ((new-pair (cons (make-item item) '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-cdr! new-pair (front-ptr deque))
           (set-front-ptr! deque new-pair)
           deque))))
(define (rear-insert-deque! deque item)
  (let ((new-pair (cons (make-item item) '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-ptr (car new-pair) (rear-ptr deque))
           (set-cdr! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           deque))))
(define (front-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "empty queue" '()))
        (else
         (set-front-ptr! deque (cdr (front-ptr deque))))))
(define (rear-delete-deque! deque)
  (cond ((empty-deque? deque)
         (error "empty dequeu" '()))
        (else
         (let ((prev-pair (get-ptr (car (rear-ptr deque)))))
           (set-rear-ptr! deque prev-pair)))))



;;;; accessor method;;;
(define (get-value item)
  ((item 'get-item)))
(define (get-ptr item)
  ((item 'get-rear)))
(define (set-value item value)
  ((item 'set-item!) value))
(define (set-ptr item ptr)
  ((item 'set-rear!) ptr))
(define (make-item val)
  (let ((it (item)))
    ((it 'set-item!) val)
    it))
    
  

;;; abstraction of the data stored
;;; in the list, the data has a value, and a rear pointer.
(define (item)
  (define null '())
  (define value '())
  (define rear '())
  (define (set-rear! r)
    (set! rear r))
  (define (set-item! v)
    (set! value v))
  (define (get-item) value)
  (define (get-rear) rear)
  (define (dispatch signal)
    (cond ((eq? signal 'set-rear!) set-rear!)
          ((eq? signal 'get-rear) get-rear)
          ((eq? signal 'set-item!) set-item!)
          ((eq? signal 'get-item) get-item)
          (else (error "wrong signal" signal))))
  dispatch)

(define dq (make-deque))
(front-insert-deque! dq 'a)
(rear-insert-deque! dq 'b)